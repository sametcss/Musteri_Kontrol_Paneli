generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  code      String   @unique @db.VarChar(3)
  flagIcon  String?  @map("flag_icon") @db.VarChar(255)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  offices Office[]
  customers Customer[]
  
  @@map("countries")
  visaTypes CountryVisaType[]
}

model VisaType {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50)
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  
  customers Customer[]
  
  @@map("visa_types")
  countries CountryVisaType[]
}

model CountryVisaType {
  countryId Int
  visaTypeId Int
  isActive   Boolean @default(true)

  country   Country  @relation(fields: [countryId], references: [id])
  visaType  VisaType @relation(fields: [visaTypeId], references: [id])

  @@id([countryId, visaTypeId])
}

model Office {
  id       Int     @id @default(autoincrement())
  name     String  @db.VarChar(100)
  address  String?
  phone    String? @db.VarChar(20)
  isActive Boolean @default(true) @map("is_active")
  
  countries Country[]
  customers Customer[]
  
  @@map("offices")
}

model AdditionalService {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  price       Decimal @db.Decimal(10, 2)
  description String?
  isActive    Boolean @default(true) @map("is_active")
  
  customerServices CustomerAdditionalService[]
  
  @@map("additional_services")
}

model Customer {
  id                 Int      @id @default(autoincrement())
  firstName          String
  lastName           String
  birthDate          DateTime
  passportNo         String   @unique
  passportExpiryDate DateTime
  tcIdentity         String   @unique
  phone              String
  email              String?
  priorityLevel      Int      @default(3)
  notes              String?
  status             String   @default("active")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Yeni alanlar eklendi
  visaExpiryDate     DateTime?  // Vize bitiş tarihi
  appointmentDate    DateTime?  // Randevu tarihi (tarih + saat)
  appointmentStatus  String?    @default("pending") // pending, confirmed, completed, cancelled
  documentsComplete  Boolean    @default(false)     // Evraklar tam mı?
  totalCost          Decimal?   @db.Decimal(10,2)   // Müşteri maliyeti
  paidAmount         Decimal?   @db.Decimal(10,2)   // Ödenen tutar
  remainingAmount    Decimal?   @db.Decimal(10,2)   // Kalan tutar
  
  // İlişkiler
  countryId  Int
  visaTypeId Int
  officeId   Int
  
  country   Country  @relation(fields: [countryId], references: [id])
  visaType  VisaType @relation(fields: [visaTypeId], references: [id])
  office    Office   @relation(fields: [officeId], references: [id])
  
  // Belgeler ilişkisi
  documents Document[]
  
  additionalServices CustomerAdditionalService[]
}

// YENİ: Belgeler tablosu
model Document {
  id           Int      @id @default(autoincrement())
  customerId   Int      @map("customer_id")
  fileName     String   @map("file_name") @db.VarChar(255)
  originalName String   @map("original_name") @db.VarChar(255)
  fileSize     Int      @map("file_size") // bytes cinsinden
  mimeType     String   @map("mime_type") @db.VarChar(100)
  documentType String   @map("document_type") @db.VarChar(50) // passport, photo, application_form, etc.
  filePath     String   @map("file_path") @db.VarChar(500)
  uploadedAt   DateTime @default(now()) @map("uploaded_at")
  uploadedBy   String?  @map("uploaded_by") @db.VarChar(100) // Hangi kullanıcı yükledi
  isActive     Boolean  @default(true) @map("is_active")
  
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  @@map("documents")
}

model CustomerAdditionalService {
  id                   Int     @id @default(autoincrement())
  customerId           Int     @map("customer_id")
  additionalServiceId  Int     @map("additional_service_id")
  quantity             Int     @default(1)
  price                Decimal @db.Decimal(10, 2)
  createdAt            DateTime @default(now()) @map("created_at")
  
  customer           Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  additionalService  AdditionalService @relation(fields: [additionalServiceId], references: [id])
  
  @@map("customer_additional_services")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(50)
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  fullName     String   @map("full_name") @db.VarChar(200)
  role         String   @default("employee") @db.VarChar(20)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  
  @@map("users")
}